This repo is to be used for educational purposes only, and is intended to be run against your own machine. We do not condone the use of these skills/techniques outside of this lab environment. DO NOT change any files or commands; run exactly as described in “Starting the Lab” steps 1-4.  

Scenario
A local kitten daycare has recently suffered a zero-day exploit resulting in full system compromise via RCE (remote code execution). A digital forensics team investigating the incident has created a LAB environment meant to serve as a proof-of-concept for what happened. Can you replicate what happened that fateful day for the local kitten daycare?


Pre-Requisites
1.    Docker Desktop – https://www.docker.com/products/docker-desktop/ 
2.    Git – https://git-scm.com/book/en/v2/Getting-Started-Installing-Git 


Starting the Lab Environment
** Be sure to run the below commands as an administrative/root user, or with administrative/root privileges (e.g. 'sudo docker compose up -d').
1.    Open Docker Desktop
2.    Run 'git clone https://github.com/sgwgsw/Rowdyhacks2022-CTF.git' in a terminal window.
3.    Change to the Log4j_LAB-Docker folder and run 'docker compose up -d' with admin/sudo privileges.
4.    Once the command has finished running, select 'Containers / Apps' in Docker Desktop to confirm all containers in the stack are running

Hints
1.    The web_server container is running the open source library Log4j v2.14.0. It is hosting a web server on port 8080.
2.    The curl_instance container should be used to send the exploit string; you may consider using the curl command.
3.    The c2_instance container should be used as your c2 (command and control) instance; you may consider listening on port 9999.
4.    The ldap_server container is hosting the reference object, 'a'; reference objects respond with compiled java classes.
5.    The http_server container is hosting the aforementioned compiled java code; the ldap_server will reach out and get said java code, if properly called/referenced.
6.    You will need IP addresses at a certain point in this lab. Use 'ping -c 1 <container_hostname>' in curl_instance to get the IP of any container. Hostnames are: web_server, http_server, ldap_server, c2_instance, curl_instance
7.    You will need two simultaneous Docker CLI sessions for the lab. To do so, hover over the container in Docker Desktop and click the 'CLI' button.


WHEN YOU ARE FINISHED
1.    Close any CLI/terminal sessions
2.    Click the stop button in 'Containers / Apps' on Docker Desktop
3.    Run 'docker system prune -a' on the host machine, and press 'y' when prompted
4.    Delete the cloned Log4j_LAB-Docker repo/folder on your machine
